/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        // write your code here
        if(head==NULL||head->next==NULL)
            return;
            
        ListNode *s=head, *f=head->next;
        while(f!=NULL&&f->next!=NULL){
            s=s->next;
            f=f->next->next;
        }
        
        ListNode *m=s->next;
        s->next=NULL;
        
        ListNode *r=reverse(m);
        ListNode *l=merge(head,r);

    }
    ListNode *reverse(ListNode *head){
        if(head==NULL||head->next==NULL) return head;
        
        ListNode *pre=NULL;
        
        while(head!=NULL){
            ListNode *temp=head->next;
            head->next=pre;
            pre=head;
            head=temp;
        }
        return pre;
    }
    ListNode *merge(ListNode *l,ListNode *r){
        ListNode *f=new ListNode(0), *head=f;
        while(l!=NULL&&r!=NULL){
            f->next=l;
            f=f->next;
            l=l->next;
            
            f->next=r;
            f=f->next;
            r=r->next;
        }
        if(l!=NULL) f->next=l;
        return head->next;
    }
};
