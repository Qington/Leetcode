class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> result;
        if(s.size()==0) return result;
        
        vector<string> list;
        dfs(result,s,list,0);
        return result;
    }
    void dfs(vector<vector<string>> &result, string s,
             vector<string> &list, int pos) {
        if(pos==s.size()) {
            result.push_back(list);
            return;
        }
        
        for (int i=pos;i<s.size();i++){
            string temp=s.substr(pos,i-pos+1);
            if(!IsValid(temp)){
                continue;
            }
            
            list.push_back(temp);
            dfs(result,s,list,i+1);
            list.pop_back();
        }
    }
    bool IsValid(string s) {
        int i=0,j=s.size()-1;
        while(i<j) {
            if(s[i]==s[j])
            {
                i++;
                j--;
            }else{
                return false;
            }
        }
        return true;
    }
};
