class Solution {
public:
    /**
     * @param s: A string
     * @return: A list of lists of string
     */
    vector<vector<string>> partition(string s) {
        // write your code here
        vector<vector<string>> ans;
        if(s.size()==0){
            //ans.push_back(s);
            return ans;
        }
        
        vector<string> path;
        dfs(ans,s,path,0);
        return ans;
    }
    void dfs(vector<vector<string>> &ans, string &s, vector<string> &path, int pos){
        if(pos==s.size()){
            ans.push_back(path);
            return;
        }
        
      
        for(int i=pos; i<s.size(); i++){
            string temp=(s.substr(pos,i-pos+1));
            if(!isValid(temp)) continue;
    
            path.push_back(temp);
            dfs(ans,s,path,i+1);
            path.pop_back();
        }
    }
    bool isValid(string temp){
        int l=0, r=temp.size()-1;
        while(l<r){
            if(temp[l]!=temp[r])
                return false;
            l++;
            r--;
        }
        return true;
    }
  
};
