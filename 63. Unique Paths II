class Solution {
public:
    /**
     * @param obstacleGrid: A list of lists of integers
     * @return: An integer
     */ 
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        // write your code here
        if(obstacleGrid.size()==0) return -1;
        
        vector<vector<int>> f(obstacleGrid.size(),vector<int>(obstacleGrid[0].size()));
         for(int i=0; i<obstacleGrid.size(); i++) {
            for(int j=0; i<obstacleGrid[0].size(); j++) {
                f[i][j]=-1;
            }
        }
        for(int i=0; i<obstacleGrid[0].size(); i++) {
            if(obstacleGrid[0][i]==0)
                f[0][i]=1;
            if(obstacleGrid[i][0]==0)
                f[i][0]=1;
        }
        for(int i=1; i<obstacleGrid.size(); i++) {
            for(int j=1; i<obstacleGrid[0].size(); j++) {
                if(f[i][j]==0){
                    if(f[i][j-1]!=-1&&f[i-1][j]!=-1)
                        f[i][j]=f[i-1][j]+f[i][j-1];
                    else if(f[i][j-1]!=-1)
                        f[i][j]=f[i][j-1];
                    else if(f[i-1][j]!=-1)
                        f[i][j]=f[i-1][j];
                    else
                        f[i][j]=-1;
                    
                }
            }
        }
        return f[obstacleGrid.size()-1][obstacleGrid[0].size()-1];
    }
};
