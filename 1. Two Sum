version 1.hash.
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int s=nums.size();
        vector<int> result;
        if(s<2) return result;
        
        unordered_map<int, int> hash;

        for(int i=0; i<s; i++) {
            if(hash.find(target-nums[i])!=hash.end()) {
                result.push_back(hash[target-nums[i]]);
                result.push_back(i);
                return result;
            }
            hash[nums[i]]=i;
        }
        return result;
    }
};

version 2. burch force.
class Solution {
public:
    /*
     * @param numbers : An array of Integer
     * @param target : target = numbers[index1] + numbers[index2]
     * @return : [index1+1, index2+1] (index1 < index2)
     */
    vector<int> twoSum(vector<int> &nums, int target) {
        // write your code here
        int s=nums.size();
        vector<int> result;
        if(s<2) return result;
        
        for(int i=0; i<s-1; i++) {
            for(int j=i+1; j<s; j++) {
                if(target==nums[i]+nums[j]) {
                    result.push_back(i+1);
                    result.push_back(j+1);
                    return result;
                }
            }
        }
        return result;
    }
};


