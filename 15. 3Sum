version 1. hash.
class Solution {
public:    
    /**
     * @param numbers : Give an array numbers of n integer
     * @return : Find all unique triplets in the array which gives the sum of zero.
     */
    vector<vector<int> > threeSum(vector<int> &nums) {
        // write your code here
        int s=nums.size();
        vector<vector<int>> result;
        if(s<3) return result;
        
        sort(nums.begin(),nums.end());
        
        for(int i=0; i<s-2; i++) {
            int temp=0-nums[i];
            unordered_map<int, int> hash;
            for(int j=i+1; j<s; j++) {
                vector<int> out;
                if(hash.find(temp-nums[j])!=hash.end()) {
                    out.push_back(nums[i]);
                    out.push_back(temp-nums[j]);
                    out.push_back(nums[j]);
                    //break;
                }
                hash[nums[j]]=j;
                if(!out.empty()&&find(result.begin(),result.end(),out)==result.end()) {
                    result.push_back(out);
                }
            }
        }
        return result;
    }
};

version 2. pointers.
class Solution {
public:    
    vector<vector<int> > threeSum(vector<int> &nums) {
        
        vector<vector<int> > result;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            // two sum;
            int start = i + 1, end = nums.size() - 1;
            int target = -nums[i];
            while (start < end) {
                if (start > i + 1 && nums[start - 1] == nums[start]) {
                    start++;
                    continue;
                }
                if (nums[start] + nums[end] < target) {
                    start++;
                } else if (nums[start] + nums[end] > target) {
                    end--;
                } else {
                    vector<int> triple;
                    triple.push_back(nums[i]);
                    triple.push_back(nums[start]);
                    triple.push_back(nums[end]);
                    result.push_back(triple);
                    start++;
                }
            }
        }
        
        return result;
    }
};
