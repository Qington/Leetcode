Version 1.
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of the binary search tree.
     * @param node: insert this node into the binary search tree
     * @return: The root of the new binary search tree.
     */
    TreeNode* insertNode(TreeNode* root, TreeNode* node) {
        // write your code here
        if(root==NULL) return node;
        
        if(node->val<root->val) {
            root->left=insertNode(root->left,node);
        }else{
             root->right=insertNode(root->right,node);
        }
        return root;
    }
};
Version 2.
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of the binary search tree.
     * @param node: insert this node into the binary search tree
     * @return: The root of the new binary search tree.
     */
    TreeNode* insertNode(TreeNode* root, TreeNode* node) {
        // write your code here
        if(root==NULL) return node;
        
        TreeNode* temp=root;
        TreeNode* last=NULL;
        while(temp!=NULL) {
            last=temp;
            if(node->val<temp->val) {
                temp=temp->left;
            }else{
                temp=temp->right;
            }
        }
        if(last!=NULL) {
            if(last->val>node->val) {
                last->left=node;
            }else {
                last->right=node;
            }
        }
        return root;
    }
};
