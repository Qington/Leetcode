class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        if(n<1) return result;
        
        vector<int> cols;
        Search(cols,n,result);
        return result;
    }
    void Search(vector<int> &cols, int n, vector<vector<string>> &result) {
        if(cols.size()==n) {
            vector<string> temp=DrawString(cols,n);
            result.push_back(temp);
            return;
        }
        
        for(int i=0; i<n; i++) {
            if(!IsValid(cols,i)) {
                continue;
            }
            
            cols.push_back(i);
            Search(cols,n,result);
            cols.pop_back();
        }
        
    }
    vector<string> DrawString(vector<int> &cols, int n) {
        vector<string> result;
        for(int i=0; i<cols.size(); i++) {
            string temp(n,'.');
            temp[cols[i]]='Q';
            result.push_back(temp);
        }
        return result;
    }
    bool IsValid(vector<int> &cols, int col) {
        int row=cols.size();
        for (int i=0; i<cols.size(); i++) {
            if(cols[i]==col)
                return false;
            else if (i-cols[i]==row-col)
                return false;
            else if (i+cols[i]==row+col)
                return false;
        }
        return true;
    }
};
