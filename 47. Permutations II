class Solution {
public:
    vector<vector<int> > permuteUnique(vector<int> &nums) {
        vector<vector<int>> ans;
        if(nums.empty()){
            ans.push_back(nums);
            return ans;
        }
        
        sort(nums.begin(),nums.end());
        vector<int> path;
        vector<bool> label(nums.size(),false);// mark the statue.
        dfs(ans,nums,path,label);
        return ans;
    }
    void dfs(vector<vector<int>> &ans, vector<int> &nums, vector<int> &path,vector<bool> &label){
        if(path.size()==nums.size()){
            ans.push_back(path);
            return;
        }
        
        for(int i=0;i<nums.size();i++){
            if(label[i]) continue;
            if(i>0&&label[i-1]==false&&nums[i]==nums[i-1]) continue;
            
            path.push_back(nums[i]);
            label[i]=true;
            dfs(ans,nums,path,label);
            path.pop_back();
            label[i]=false;
        }   
    }
};
