class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    vector<vector<int> > permuteUnique(vector<int> &nums) {
        // write your code here
        vector<vector<int>> result;
        if(nums.size()==0) return result;
        
        sort(nums.begin(),nums.end());
        vector<int> path;
        bool label[nums.size()];//如果建成vector<bool>,则runtime out.尽量缩小所占空间。
        for(int i=0; i<nums.size(); i++) {
            label[i]=false;
        }
        
        dfs(result,nums,path,label);
        return result;
    }
    void dfs(vector<vector<int>> &result, vector<int> &nums, 
             vector<int> &path, bool *label) {
        if(path.size()==nums.size()) {
            result.push_back(path);
            return;
        }
        
         for (int i=0; i<nums.size(); i++) {
            if(label[i]) continue;
            if(i>0&&label[i-1]==false&&nums[i]==nums[i-1]) {
            /*
            上面的判断主要是为了去除重复元素影响。
            比如，给出一个排好序的数组，[1,2,2]，那么第一个2和第二2如果在结果中互换位置，
            我们也认为是同一种方案，所以我们强制要求相同的数字，原来排在前面的，在结果
            当中也应该排在前面，这样就保证了唯一性。所以当前面的2还没有使用的时候，就
            不应该让后面的2使用。
            */
               continue;
            }
             
            path.push_back(nums[i]);
            label[i]=true;
            dfs(result,nums,path,label);
            path.pop_back();
            label[i]=false;
         }
    }
};
